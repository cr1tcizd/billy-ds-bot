/**
 * @category Decorator
 */
declare class Decorator {
    protected _classRef: Record<string, any>;
    protected _from: Record<string, any>;
    protected _key: string;
    protected _method?: Record<string, any>;
    protected _index?: number;
    get index(): number | undefined;
    get classRef(): Record<string, any>;
    set classRef(value: Record<string, any>);
    get from(): Record<string, any>;
    set from(value: Record<string, any>);
    get key(): string;
    get method(): Record<string, any> | undefined;
    get isClass(): boolean;
    protected constructor();
    decorateUnknown(classRef: Record<string, any>, key?: string, method?: PropertyDescriptor, index?: number): this;
    decorate(classRef: Record<string, any>, key: string, method?: Record<string, any>, from?: Record<string, any>, index?: number): this;
}

type ModifyFunction<ToModify extends Decorator> = (original: ToModify) => unknown;
/**
 * @category Internal
 */
declare class Modifier<ToModify extends Decorator = Decorator> extends Decorator {
    private _toModify;
    private _modifyTypes;
    protected constructor(toModify: ModifyFunction<ToModify>, modifyTypes: unknown[]);
    static create<ToModifyEx extends Decorator>(toModify: ModifyFunction<ToModifyEx>, ...modifyTypes: unknown[]): Modifier<ToModifyEx>;
    /**
     * Apply the modifier to a list of objects
     * it only applies the modifications to linked objects
     * that are on the targets type of modification
     *
     * @param modifiers - The modifier list
     * @param originals - The list of objects to modify
     *
     * @returns
     */
    static applyFromModifierListToList(modifiers: Modifier[], originals: Decorator[]): Promise<void[]>;
    applyModifications(original: ToModify): unknown;
}

/**
 * @category Internal
 */
declare class DecoratorUtils {
    /**
     * Get the list of the linked decorators
     *
     * A and B are two linked decorators
     *
     * @example
     * ```typescript
     * .@A()
     * .@B()
     * method() {}
     * ```
     *
     * @example
     * ```typescript
     * method(
     *    .@A()
     *    .@B()
     *    param: string
     * ) {}
     * ```
     *
     * @example
     * ```typescript
     * .@A()
     * .@B()
     * class X {}
     * ```
     *
     * @param a - The decorator
     * @param list - The list of linked decorators to a
     * @returns
     */
    static getLinkedObjects<Type extends Decorator>(a: Decorator, list: Type[]): Type[];
    static decorateAClass(method?: PropertyDescriptor): boolean;
}

type ClassDecoratorEx = (target: Record<string, any>, propertyKey?: undefined, descriptor?: undefined) => void;
type PropertyDecorator = (target: Record<string, any>, propertyKey: string, descriptor?: undefined) => void;
type MethodDecoratorEx = <T>(target: Record<string, any>, propertyKey: string, descriptor: TypedPropertyDescriptor<T>) => void;
type ParameterDecoratorEx = (target: Record<string, any>, propertyKey: string, parameterIndex: number) => void;
type ClassMethodDecorator = <T>(target: Record<string, any>, propertyKey?: string, descriptor?: TypedPropertyDescriptor<T>) => void;

export { ClassDecoratorEx, ClassMethodDecorator, Decorator, DecoratorUtils, MethodDecoratorEx, Modifier, ModifyFunction, ParameterDecoratorEx, PropertyDecorator };
